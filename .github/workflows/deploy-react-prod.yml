name: Build and Deploy React App for Current Prod (Next.js SSR)

on:
  push:
    branches:
      - test_back_img
  pull_request:
    branches:
      - test_back_img

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3

      - name: üß∞ Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci
        working-directory: frontend-react

      - name: üíæ Cache Next.js build cache
        uses: actions/cache@v3
        with:
          path: frontend-react/.next/cache
          key: nextjs-${{ runner.os }}-${{ hashFiles('frontend-react/package-lock.json') }}
          restore-keys: |
            nextjs-${{ runner.os }}-

      - name: üõ† Build app
        run: NEXT_DISABLE_ESLINT_PLUGIN=true npm run build
        working-directory: frontend-react

      - name: üìÅ Prepare deployment folder
        run: |
          mkdir deploy
          cp -r frontend-react/.next deploy/.next
          cp -r frontend-react/public deploy/public
          cp frontend-react/package*.json deploy/
          cp frontend-react/next.config.mjs deploy/ || true

      - name: üì¶ Archive deployment folder as react-app-prod.tar.gz
        run: tar -czf react-app-prod.tar.gz deploy

      - name: üöÄ Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: react-build-package
          path: react-app-prod.tar.gz

  deploy:
    if: github.ref == 'refs/heads/test_back_img' && needs.build.result == 'success'
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: üì• Download artifact
        uses: actions/download-artifact@v4
        with:
          name: react-build-package
          path: .

      - name: üì§ Copy to server and deploy
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          echo "üì§ –ö–æ–ø–∏—Ä—É–µ–º –∞—Ä—Ö–∏–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä..."
          scp -o StrictHostKeyChecking=no react-app-prod.tar.gz root@${{ secrets.IP_DOMAIN }}:/home/Nikolay/react-app-prod.tar.gz

          echo "üöÄ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –¥–µ–ø–ª–æ–π..."
          ssh -o StrictHostKeyChecking=no root@${{ secrets.IP_DOMAIN }} << 'EOF'
            set -e
            cd /home/Nikolay

            echo "üßº –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–∞–ø–∫–∏ .next –∏ public..."
            rm -rf funScrut/frontend-react-prod/.next
            rm -rf funScrut/frontend-react-prod/public

            echo "üì¶ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –±–∏–ª–¥..."
            rm -rf deploy
            tar -xzf react-app-prod.tar.gz
            rm react-app-prod.tar.gz

            echo "üìÇ –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –≤ frontend-react-prod..."
            cp -r deploy/.next funScrut/frontend-react-prod/.next
            cp -r deploy/public funScrut/frontend-react-prod/public
            cp deploy/package*.json funScrut/frontend-react-prod/
            cp deploy/next.config.mjs funScrut/frontend-react-prod/ || true

            echo "üîß –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –±–µ–∑ –∫–µ—à–∞..."
            cd funScrut
            docker compose build --no-cache react-app-prod
            docker compose up -d react-app-prod

            echo "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ."
          EOF
