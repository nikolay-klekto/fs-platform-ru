/*
 * This file is generated by jOOQ.
 */
package com.fs.domain.jooq.tables.records


import com.fs.client.ru.enums.ClientRoleModel
import com.fs.client.ru.enums.EducationModel
import com.fs.client.ru.enums.EmploymentModel
import com.fs.domain.jooq.tables.Client

import java.time.LocalDate
import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record17
import org.jooq.Row17
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ClientRecord() : UpdatableRecordImpl<ClientRecord>(Client.CLIENT), Record17<Long?, Long?, Boolean?, LocalDate?, LocalDateTime?, EducationModel?, String?, EmploymentModel?, String?, String?, String?, String?, ClientRoleModel?, String?, String?, String?, String?> {

    open var basketId: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var cityId: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    open var activateStatus: Boolean?
        set(value): Unit = set(2, value)
        get(): Boolean? = get(2) as Boolean?

    open var birthday: LocalDate?
        set(value): Unit = set(3, value)
        get(): LocalDate? = get(3) as LocalDate?

    open var dateCreated: LocalDateTime?
        set(value): Unit = set(4, value)
        get(): LocalDateTime? = get(4) as LocalDateTime?

    open var educationStatus: EducationModel?
        set(value): Unit = set(5, value)
        get(): EducationModel? = get(5) as EducationModel?

    open var email: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    open var employment: EmploymentModel?
        set(value): Unit = set(7, value)
        get(): EmploymentModel? = get(7) as EmploymentModel?

    open var firstName: String?
        set(value): Unit = set(8, value)
        get(): String? = get(8) as String?

    open var lastName: String?
        set(value): Unit = set(9, value)
        get(): String? = get(9) as String?

    open var password: String?
        set(value): Unit = set(10, value)
        get(): String? = get(10) as String?

    open var phoneNumber: String?
        set(value): Unit = set(11, value)
        get(): String? = get(11) as String?

    open var role: ClientRoleModel?
        set(value): Unit = set(12, value)
        get(): ClientRoleModel? = get(12) as ClientRoleModel?

    open var telegramUsername: String?
        set(value): Unit = set(13, value)
        get(): String? = get(13) as String?

    open var salt: String?
        set(value): Unit = set(14, value)
        get(): String? = get(14) as String?

    open var id: String?
        set(value): Unit = set(15, value)
        get(): String? = get(15) as String?

    open var username: String?
        set(value): Unit = set(16, value)
        get(): String? = get(16) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    // -------------------------------------------------------------------------
    // Record17 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row17<Long?, Long?, Boolean?, LocalDate?, LocalDateTime?, EducationModel?, String?, EmploymentModel?, String?, String?, String?, String?, ClientRoleModel?, String?, String?, String?, String?> = super.fieldsRow() as Row17<Long?, Long?, Boolean?, LocalDate?, LocalDateTime?, EducationModel?, String?, EmploymentModel?, String?, String?, String?, String?, ClientRoleModel?, String?, String?, String?, String?>
    override fun valuesRow(): Row17<Long?, Long?, Boolean?, LocalDate?, LocalDateTime?, EducationModel?, String?, EmploymentModel?, String?, String?, String?, String?, ClientRoleModel?, String?, String?, String?, String?> = super.valuesRow() as Row17<Long?, Long?, Boolean?, LocalDate?, LocalDateTime?, EducationModel?, String?, EmploymentModel?, String?, String?, String?, String?, ClientRoleModel?, String?, String?, String?, String?>
    override fun field1(): Field<Long?> = Client.CLIENT.BASKET_ID
    override fun field2(): Field<Long?> = Client.CLIENT.CITY_ID
    override fun field3(): Field<Boolean?> = Client.CLIENT.ACTIVATE_STATUS
    override fun field4(): Field<LocalDate?> = Client.CLIENT.BIRTHDAY
    override fun field5(): Field<LocalDateTime?> = Client.CLIENT.DATE_CREATED
    override fun field6(): Field<EducationModel?> = Client.CLIENT.EDUCATION_STATUS
    override fun field7(): Field<String?> = Client.CLIENT.EMAIL
    override fun field8(): Field<EmploymentModel?> = Client.CLIENT.EMPLOYMENT
    override fun field9(): Field<String?> = Client.CLIENT.FIRST_NAME
    override fun field10(): Field<String?> = Client.CLIENT.LAST_NAME
    override fun field11(): Field<String?> = Client.CLIENT.PASSWORD
    override fun field12(): Field<String?> = Client.CLIENT.PHONE_NUMBER
    override fun field13(): Field<ClientRoleModel?> = Client.CLIENT.ROLE
    override fun field14(): Field<String?> = Client.CLIENT.TELEGRAM_USERNAME
    override fun field15(): Field<String?> = Client.CLIENT.SALT
    override fun field16(): Field<String?> = Client.CLIENT.ID
    override fun field17(): Field<String?> = Client.CLIENT.USERNAME
    override fun component1(): Long? = basketId
    override fun component2(): Long? = cityId
    override fun component3(): Boolean? = activateStatus
    override fun component4(): LocalDate? = birthday
    override fun component5(): LocalDateTime? = dateCreated
    override fun component6(): EducationModel? = educationStatus
    override fun component7(): String? = email
    override fun component8(): EmploymentModel? = employment
    override fun component9(): String? = firstName
    override fun component10(): String? = lastName
    override fun component11(): String? = password
    override fun component12(): String? = phoneNumber
    override fun component13(): ClientRoleModel? = role
    override fun component14(): String? = telegramUsername
    override fun component15(): String? = salt
    override fun component16(): String? = id
    override fun component17(): String? = username
    override fun value1(): Long? = basketId
    override fun value2(): Long? = cityId
    override fun value3(): Boolean? = activateStatus
    override fun value4(): LocalDate? = birthday
    override fun value5(): LocalDateTime? = dateCreated
    override fun value6(): EducationModel? = educationStatus
    override fun value7(): String? = email
    override fun value8(): EmploymentModel? = employment
    override fun value9(): String? = firstName
    override fun value10(): String? = lastName
    override fun value11(): String? = password
    override fun value12(): String? = phoneNumber
    override fun value13(): ClientRoleModel? = role
    override fun value14(): String? = telegramUsername
    override fun value15(): String? = salt
    override fun value16(): String? = id
    override fun value17(): String? = username

    override fun value1(value: Long?): ClientRecord {
        this.basketId = value
        return this
    }

    override fun value2(value: Long?): ClientRecord {
        this.cityId = value
        return this
    }

    override fun value3(value: Boolean?): ClientRecord {
        this.activateStatus = value
        return this
    }

    override fun value4(value: LocalDate?): ClientRecord {
        this.birthday = value
        return this
    }

    override fun value5(value: LocalDateTime?): ClientRecord {
        this.dateCreated = value
        return this
    }

    override fun value6(value: EducationModel?): ClientRecord {
        this.educationStatus = value
        return this
    }

    override fun value7(value: String?): ClientRecord {
        this.email = value
        return this
    }

    override fun value8(value: EmploymentModel?): ClientRecord {
        this.employment = value
        return this
    }

    override fun value9(value: String?): ClientRecord {
        this.firstName = value
        return this
    }

    override fun value10(value: String?): ClientRecord {
        this.lastName = value
        return this
    }

    override fun value11(value: String?): ClientRecord {
        this.password = value
        return this
    }

    override fun value12(value: String?): ClientRecord {
        this.phoneNumber = value
        return this
    }

    override fun value13(value: ClientRoleModel?): ClientRecord {
        this.role = value
        return this
    }

    override fun value14(value: String?): ClientRecord {
        this.telegramUsername = value
        return this
    }

    override fun value15(value: String?): ClientRecord {
        this.salt = value
        return this
    }

    override fun value16(value: String?): ClientRecord {
        this.id = value
        return this
    }

    override fun value17(value: String?): ClientRecord {
        this.username = value
        return this
    }

    override fun values(value1: Long?, value2: Long?, value3: Boolean?, value4: LocalDate?, value5: LocalDateTime?, value6: EducationModel?, value7: String?, value8: EmploymentModel?, value9: String?, value10: String?, value11: String?, value12: String?, value13: ClientRoleModel?, value14: String?, value15: String?, value16: String?, value17: String?): ClientRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        this.value10(value10)
        this.value11(value11)
        this.value12(value12)
        this.value13(value13)
        this.value14(value14)
        this.value15(value15)
        this.value16(value16)
        this.value17(value17)
        return this
    }

    /**
     * Create a detached, initialised ClientRecord
     */
    constructor(basketId: Long? = null, cityId: Long? = null, activateStatus: Boolean? = null, birthday: LocalDate? = null, dateCreated: LocalDateTime? = null, educationStatus: EducationModel? = null, email: String? = null, employment: EmploymentModel? = null, firstName: String? = null, lastName: String? = null, password: String? = null, phoneNumber: String? = null, role: ClientRoleModel? = null, telegramUsername: String? = null, salt: String? = null, id: String? = null, username: String? = null): this() {
        this.basketId = basketId
        this.cityId = cityId
        this.activateStatus = activateStatus
        this.birthday = birthday
        this.dateCreated = dateCreated
        this.educationStatus = educationStatus
        this.email = email
        this.employment = employment
        this.firstName = firstName
        this.lastName = lastName
        this.password = password
        this.phoneNumber = phoneNumber
        this.role = role
        this.telegramUsername = telegramUsername
        this.salt = salt
        this.id = id
        this.username = username
    }

    /**
     * Create a detached, initialised ClientRecord
     */
    constructor(value: com.fs.domain.jooq.tables.pojos.Client?): this() {
        if (value != null) {
            this.basketId = value.basketId
            this.cityId = value.cityId
            this.activateStatus = value.activateStatus
            this.birthday = value.birthday
            this.dateCreated = value.dateCreated
            this.educationStatus = value.educationStatus
            this.email = value.email
            this.employment = value.employment
            this.firstName = value.firstName
            this.lastName = value.lastName
            this.password = value.password
            this.phoneNumber = value.phoneNumber
            this.role = value.role
            this.telegramUsername = value.telegramUsername
            this.salt = value.salt
            this.id = value.id
            this.username = value.username
        }
    }
}
