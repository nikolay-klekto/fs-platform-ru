/*
 * This file is generated by jOOQ.
 */
package com.fs.domain.jooq


import com.fs.domain.jooq.tables.Address
import com.fs.domain.jooq.tables.Basket
import com.fs.domain.jooq.tables.City
import com.fs.domain.jooq.tables.Client
import com.fs.domain.jooq.tables.ClientsRefreshTokens
import com.fs.domain.jooq.tables.ClientsResetPasswords
import com.fs.domain.jooq.tables.Company
import com.fs.domain.jooq.tables.CompanyPartner
import com.fs.domain.jooq.tables.CompanyProfession
import com.fs.domain.jooq.tables.Constants
import com.fs.domain.jooq.tables.Country
import com.fs.domain.jooq.tables.Databasechangeloglock
import com.fs.domain.jooq.tables.Event
import com.fs.domain.jooq.tables.EventCategories
import com.fs.domain.jooq.tables.InternshipType
import com.fs.domain.jooq.tables.Office
import com.fs.domain.jooq.tables.Order
import com.fs.domain.jooq.tables.Partner
import com.fs.domain.jooq.tables.Profession
import com.fs.domain.jooq.tables.Review

import kotlin.collections.List

import org.jooq.Catalog
import org.jooq.Table
import org.jooq.impl.SchemaImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class DefaultSchema : SchemaImpl("", DefaultCatalog.DEFAULT_CATALOG) {
    public companion object {

        /**
         * The reference instance of <code>DEFAULT_SCHEMA</code>
         */
        val DEFAULT_SCHEMA: DefaultSchema = DefaultSchema()
    }

    /**
     * The table <code>address</code>.
     */
    val ADDRESS: Address get() = Address.ADDRESS

    /**
     * The table <code>basket</code>.
     */
    val BASKET: Basket get() = Basket.BASKET

    /**
     * The table <code>city</code>.
     */
    val CITY: City get() = City.CITY

    /**
     * The table <code>client</code>.
     */
    val CLIENT: Client get() = Client.CLIENT

    /**
     * The table <code>clients_refresh_tokens</code>.
     */
    val CLIENTS_REFRESH_TOKENS: ClientsRefreshTokens get() = ClientsRefreshTokens.CLIENTS_REFRESH_TOKENS

    /**
     * The table <code>clients_reset_passwords</code>.
     */
    val CLIENTS_RESET_PASSWORDS: ClientsResetPasswords get() = ClientsResetPasswords.CLIENTS_RESET_PASSWORDS

    /**
     * The table <code>company</code>.
     */
    val COMPANY: Company get() = Company.COMPANY

    /**
     * The table <code>company_partner</code>.
     */
    val COMPANY_PARTNER: CompanyPartner get() = CompanyPartner.COMPANY_PARTNER

    /**
     * The table <code>company_profession</code>.
     */
    val COMPANY_PROFESSION: CompanyProfession get() = CompanyProfession.COMPANY_PROFESSION

    /**
     * The table <code>constants</code>.
     */
    val CONSTANTS: Constants get() = Constants.CONSTANTS

    /**
     * The table <code>country</code>.
     */
    val COUNTRY: Country get() = Country.COUNTRY

    /**
     * The table <code>databasechangeloglock</code>.
     */
    val DATABASECHANGELOGLOCK: Databasechangeloglock get() = Databasechangeloglock.DATABASECHANGELOGLOCK

    /**
     * The table <code>event</code>.
     */
    val EVENT: Event get() = Event.EVENT

    /**
     * The table <code>event_categories</code>.
     */
    val EVENT_CATEGORIES: EventCategories get() = EventCategories.EVENT_CATEGORIES

    /**
     * The table <code>internship_type</code>.
     */
    val INTERNSHIP_TYPE: InternshipType get() = InternshipType.INTERNSHIP_TYPE

    /**
     * The table <code>office</code>.
     */
    val OFFICE: Office get() = Office.OFFICE

    /**
     * The table <code>order</code>.
     */
    val ORDER: Order get() = Order.ORDER

    /**
     * The table <code>partner</code>.
     */
    val PARTNER: Partner get() = Partner.PARTNER

    /**
     * The table <code>profession</code>.
     */
    val PROFESSION: Profession get() = Profession.PROFESSION

    /**
     * The table <code>review</code>.
     */
    val REVIEW: Review get() = Review.REVIEW

    override fun getCatalog(): Catalog = DefaultCatalog.DEFAULT_CATALOG

    override fun getTables(): List<Table<*>> = listOf(
        Address.ADDRESS,
        Basket.BASKET,
        City.CITY,
        Client.CLIENT,
        ClientsRefreshTokens.CLIENTS_REFRESH_TOKENS,
        ClientsResetPasswords.CLIENTS_RESET_PASSWORDS,
        Company.COMPANY,
        CompanyPartner.COMPANY_PARTNER,
        CompanyProfession.COMPANY_PROFESSION,
        Constants.CONSTANTS,
        Country.COUNTRY,
        Databasechangeloglock.DATABASECHANGELOGLOCK,
        Event.EVENT,
        EventCategories.EVENT_CATEGORIES,
        InternshipType.INTERNSHIP_TYPE,
        Office.OFFICE,
        Order.ORDER,
        Partner.PARTNER,
        Profession.PROFESSION,
        Review.REVIEW
    )
}
