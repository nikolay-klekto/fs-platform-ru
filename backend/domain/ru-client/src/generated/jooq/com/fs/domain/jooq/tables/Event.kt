/*
 * This file is generated by jOOQ.
 */
package com.fs.domain.jooq.tables


import com.fs.domain.jooq.Public
import com.fs.domain.jooq.keys.EVENT_PKEY
import com.fs.domain.jooq.keys.EVENT__EVENT_EVENT_CATEGORY_ID_FKEY
import com.fs.domain.jooq.tables.records.EventRecord

import java.math.BigDecimal
import java.time.LocalDate
import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row12
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Event(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, EventRecord>?,
    aliased: Table<EventRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<EventRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.event</code>
         */
        val EVENT: Event = Event()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<EventRecord> = EventRecord::class.java

    /**
     * The column <code>public.event.id</code>.
     */
    val ID: TableField<EventRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.event.date</code>.
     */
    val DATE: TableField<EventRecord, LocalDate?> = createField(DSL.name("date"), SQLDataType.LOCALDATE, this, "")

    /**
     * The column <code>public.event.description</code>.
     */
    val DESCRIPTION: TableField<EventRecord, String?> = createField(DSL.name("description"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.event.is_expired</code>.
     */
    val IS_EXPIRED: TableField<EventRecord, Boolean?> = createField(DSL.name("is_expired"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>public.event.name</code>.
     */
    val NAME: TableField<EventRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.event.public_place_name</code>.
     */
    val PUBLIC_PLACE_NAME: TableField<EventRecord, String?> = createField(DSL.name("public_place_name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.event.site</code>.
     */
    val SITE: TableField<EventRecord, String?> = createField(DSL.name("site"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.event.city_id</code>.
     */
    val CITY_ID: TableField<EventRecord, Long?> = createField(DSL.name("city_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.event.time</code>.
     */
    val TIME: TableField<EventRecord, String?> = createField(DSL.name("time"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.event.organizer</code>.
     */
    val ORGANIZER: TableField<EventRecord, String?> = createField(DSL.name("organizer"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.event.event_category_id</code>.
     */
    val EVENT_CATEGORY_ID: TableField<EventRecord, Long?> = createField(DSL.name("event_category_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.event.price</code>.
     */
    val PRICE: TableField<EventRecord, BigDecimal?> = createField(DSL.name("price"), SQLDataType.NUMERIC(10, 2), this, "")

    private constructor(alias: Name, aliased: Table<EventRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<EventRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.event</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.event</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.event</code> table reference
     */
    constructor(): this(DSL.name("event"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, EventRecord>): this(Internal.createPathAlias(child, key), child, key, EVENT, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<EventRecord, Long?> = super.getIdentity() as Identity<EventRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<EventRecord> = EVENT_PKEY
    override fun getReferences(): List<ForeignKey<EventRecord, *>> = listOf(EVENT__EVENT_EVENT_CATEGORY_ID_FKEY)

    private lateinit var _eventCategories: EventCategories

    /**
     * Get the implicit join path to the <code>public.event_categories</code>
     * table.
     */
    fun eventCategories(): EventCategories {
        if (!this::_eventCategories.isInitialized)
            _eventCategories = EventCategories(this, EVENT__EVENT_EVENT_CATEGORY_ID_FKEY)

        return _eventCategories;
    }

    val eventCategories: EventCategories
        get(): EventCategories = eventCategories()
    override fun `as`(alias: String): Event = Event(DSL.name(alias), this)
    override fun `as`(alias: Name): Event = Event(alias, this)
    override fun `as`(alias: Table<*>): Event = Event(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Event = Event(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Event = Event(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Event = Event(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row12<Long?, LocalDate?, String?, Boolean?, String?, String?, String?, Long?, String?, String?, Long?, BigDecimal?> = super.fieldsRow() as Row12<Long?, LocalDate?, String?, Boolean?, String?, String?, String?, Long?, String?, String?, Long?, BigDecimal?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, LocalDate?, String?, Boolean?, String?, String?, String?, Long?, String?, String?, Long?, BigDecimal?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, LocalDate?, String?, Boolean?, String?, String?, String?, Long?, String?, String?, Long?, BigDecimal?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
