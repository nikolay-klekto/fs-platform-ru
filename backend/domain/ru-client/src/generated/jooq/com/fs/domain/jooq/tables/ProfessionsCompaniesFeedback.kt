/*
 * This file is generated by jOOQ.
 */
package com.fs.domain.jooq.tables


import com.fs.domain.jooq.Public
import com.fs.domain.jooq.keys.PROFESSIONS_COMPANIES_FEEDBACK_PKEY
import com.fs.domain.jooq.keys.PROFESSIONS_COMPANIES_FEEDBACK__PROFESSIONS_COMPANIES_FEEDBACK_COMPANY_ID_FKEY
import com.fs.domain.jooq.keys.PROFESSIONS_COMPANIES_FEEDBACK__PROFESSIONS_COMPANIES_FEEDBACK_PROFESSION_ID_FKEY
import com.fs.domain.jooq.tables.records.ProfessionsCompaniesFeedbackRecord

import java.time.LocalDate
import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row6
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ProfessionsCompaniesFeedback(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ProfessionsCompaniesFeedbackRecord>?,
    aliased: Table<ProfessionsCompaniesFeedbackRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ProfessionsCompaniesFeedbackRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>public.professions_companies_feedback</code>
         */
        val PROFESSIONS_COMPANIES_FEEDBACK: ProfessionsCompaniesFeedback = ProfessionsCompaniesFeedback()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ProfessionsCompaniesFeedbackRecord> = ProfessionsCompaniesFeedbackRecord::class.java

    /**
     * The column <code>public.professions_companies_feedback.id</code>.
     */
    val ID: TableField<ProfessionsCompaniesFeedbackRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.professions_companies_feedback.company_id</code>.
     */
    val COMPANY_ID: TableField<ProfessionsCompaniesFeedbackRecord, Long?> = createField(DSL.name("company_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>public.professions_companies_feedback.profession_id</code>.
     */
    val PROFESSION_ID: TableField<ProfessionsCompaniesFeedbackRecord, Long?> = createField(DSL.name("profession_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.professions_companies_feedback.question</code>.
     */
    val QUESTION: TableField<ProfessionsCompaniesFeedbackRecord, String?> = createField(DSL.name("question"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.professions_companies_feedback.answer</code>.
     */
    val ANSWER: TableField<ProfessionsCompaniesFeedbackRecord, String?> = createField(DSL.name("answer"), SQLDataType.VARCHAR, this, "")

    /**
     * The column
     * <code>public.professions_companies_feedback.date_created</code>.
     */
    val DATE_CREATED: TableField<ProfessionsCompaniesFeedbackRecord, LocalDate?> = createField(DSL.name("date_created"), SQLDataType.LOCALDATE, this, "")

    private constructor(alias: Name, aliased: Table<ProfessionsCompaniesFeedbackRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ProfessionsCompaniesFeedbackRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.professions_companies_feedback</code>
     * table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.professions_companies_feedback</code>
     * table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.professions_companies_feedback</code> table
     * reference
     */
    constructor(): this(DSL.name("professions_companies_feedback"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ProfessionsCompaniesFeedbackRecord>): this(Internal.createPathAlias(child, key), child, key, PROFESSIONS_COMPANIES_FEEDBACK, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<ProfessionsCompaniesFeedbackRecord, Long?> = super.getIdentity() as Identity<ProfessionsCompaniesFeedbackRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<ProfessionsCompaniesFeedbackRecord> = PROFESSIONS_COMPANIES_FEEDBACK_PKEY
    override fun getReferences(): List<ForeignKey<ProfessionsCompaniesFeedbackRecord, *>> = listOf(PROFESSIONS_COMPANIES_FEEDBACK__PROFESSIONS_COMPANIES_FEEDBACK_COMPANY_ID_FKEY, PROFESSIONS_COMPANIES_FEEDBACK__PROFESSIONS_COMPANIES_FEEDBACK_PROFESSION_ID_FKEY)

    private lateinit var _company: Company
    private lateinit var _profession: Profession

    /**
     * Get the implicit join path to the <code>public.company</code> table.
     */
    fun company(): Company {
        if (!this::_company.isInitialized)
            _company = Company(this, PROFESSIONS_COMPANIES_FEEDBACK__PROFESSIONS_COMPANIES_FEEDBACK_COMPANY_ID_FKEY)

        return _company;
    }

    val company: Company
        get(): Company = company()

    /**
     * Get the implicit join path to the <code>public.profession</code> table.
     */
    fun profession(): Profession {
        if (!this::_profession.isInitialized)
            _profession = Profession(this, PROFESSIONS_COMPANIES_FEEDBACK__PROFESSIONS_COMPANIES_FEEDBACK_PROFESSION_ID_FKEY)

        return _profession;
    }

    val profession: Profession
        get(): Profession = profession()
    override fun `as`(alias: String): ProfessionsCompaniesFeedback = ProfessionsCompaniesFeedback(DSL.name(alias), this)
    override fun `as`(alias: Name): ProfessionsCompaniesFeedback = ProfessionsCompaniesFeedback(alias, this)
    override fun `as`(alias: Table<*>): ProfessionsCompaniesFeedback = ProfessionsCompaniesFeedback(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ProfessionsCompaniesFeedback = ProfessionsCompaniesFeedback(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ProfessionsCompaniesFeedback = ProfessionsCompaniesFeedback(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ProfessionsCompaniesFeedback = ProfessionsCompaniesFeedback(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row6<Long?, Long?, Long?, String?, String?, LocalDate?> = super.fieldsRow() as Row6<Long?, Long?, Long?, String?, String?, LocalDate?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, Long?, Long?, String?, String?, LocalDate?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, Long?, Long?, String?, String?, LocalDate?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
