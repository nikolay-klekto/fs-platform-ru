/*
 * This file is generated by jOOQ.
 */
package com.fs.domain.jooq.tables.records


import com.fs.domain.jooq.tables.ClientsResetPasswords

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ClientsResetPasswordsRecord() : UpdatableRecordImpl<ClientsResetPasswordsRecord>(ClientsResetPasswords.CLIENTS_RESET_PASSWORDS), Record4<Long?, String?, Int?, LocalDateTime?> {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var clientEmail: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var code: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    open var dateCreated: LocalDateTime?
        set(value): Unit = set(3, value)
        get(): LocalDateTime? = get(3) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<Long?, String?, Int?, LocalDateTime?> = super.fieldsRow() as Row4<Long?, String?, Int?, LocalDateTime?>
    override fun valuesRow(): Row4<Long?, String?, Int?, LocalDateTime?> = super.valuesRow() as Row4<Long?, String?, Int?, LocalDateTime?>
    override fun field1(): Field<Long?> = ClientsResetPasswords.CLIENTS_RESET_PASSWORDS.ID
    override fun field2(): Field<String?> = ClientsResetPasswords.CLIENTS_RESET_PASSWORDS.CLIENT_EMAIL
    override fun field3(): Field<Int?> = ClientsResetPasswords.CLIENTS_RESET_PASSWORDS.CODE
    override fun field4(): Field<LocalDateTime?> = ClientsResetPasswords.CLIENTS_RESET_PASSWORDS.DATE_CREATED
    override fun component1(): Long? = id
    override fun component2(): String? = clientEmail
    override fun component3(): Int? = code
    override fun component4(): LocalDateTime? = dateCreated
    override fun value1(): Long? = id
    override fun value2(): String? = clientEmail
    override fun value3(): Int? = code
    override fun value4(): LocalDateTime? = dateCreated

    override fun value1(value: Long?): ClientsResetPasswordsRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): ClientsResetPasswordsRecord {
        this.clientEmail = value
        return this
    }

    override fun value3(value: Int?): ClientsResetPasswordsRecord {
        this.code = value
        return this
    }

    override fun value4(value: LocalDateTime?): ClientsResetPasswordsRecord {
        this.dateCreated = value
        return this
    }

    override fun values(value1: Long?, value2: String?, value3: Int?, value4: LocalDateTime?): ClientsResetPasswordsRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised ClientsResetPasswordsRecord
     */
    constructor(id: Long? = null, clientEmail: String? = null, code: Int? = null, dateCreated: LocalDateTime? = null): this() {
        this.id = id
        this.clientEmail = clientEmail
        this.code = code
        this.dateCreated = dateCreated
    }

    /**
     * Create a detached, initialised ClientsResetPasswordsRecord
     */
    constructor(value: com.fs.domain.jooq.tables.pojos.ClientsResetPasswords?): this() {
        if (value != null) {
            this.id = value.id
            this.clientEmail = value.clientEmail
            this.code = value.code
            this.dateCreated = value.dateCreated
        }
    }
}
