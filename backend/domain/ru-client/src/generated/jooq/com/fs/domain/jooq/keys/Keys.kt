/*
 * This file is generated by jOOQ.
 */
package com.fs.domain.jooq.keys


import com.fs.domain.jooq.tables.Address
import com.fs.domain.jooq.tables.Basket
import com.fs.domain.jooq.tables.City
import com.fs.domain.jooq.tables.Client
import com.fs.domain.jooq.tables.ClientsLetters
import com.fs.domain.jooq.tables.ClientsRefreshTokens
import com.fs.domain.jooq.tables.ClientsResetPasswords
import com.fs.domain.jooq.tables.Company
import com.fs.domain.jooq.tables.CompanyPartner
import com.fs.domain.jooq.tables.CompanyProfession
import com.fs.domain.jooq.tables.Constants
import com.fs.domain.jooq.tables.Country
import com.fs.domain.jooq.tables.Databasechangeloglock
import com.fs.domain.jooq.tables.Event
import com.fs.domain.jooq.tables.EventCategories
import com.fs.domain.jooq.tables.InternshipType
import com.fs.domain.jooq.tables.JobRequests
import com.fs.domain.jooq.tables.Office
import com.fs.domain.jooq.tables.Order
import com.fs.domain.jooq.tables.Partner
import com.fs.domain.jooq.tables.Profession
import com.fs.domain.jooq.tables.Review
import com.fs.domain.jooq.tables.records.AddressRecord
import com.fs.domain.jooq.tables.records.BasketRecord
import com.fs.domain.jooq.tables.records.CityRecord
import com.fs.domain.jooq.tables.records.ClientRecord
import com.fs.domain.jooq.tables.records.ClientsLettersRecord
import com.fs.domain.jooq.tables.records.ClientsRefreshTokensRecord
import com.fs.domain.jooq.tables.records.ClientsResetPasswordsRecord
import com.fs.domain.jooq.tables.records.CompanyPartnerRecord
import com.fs.domain.jooq.tables.records.CompanyProfessionRecord
import com.fs.domain.jooq.tables.records.CompanyRecord
import com.fs.domain.jooq.tables.records.ConstantsRecord
import com.fs.domain.jooq.tables.records.CountryRecord
import com.fs.domain.jooq.tables.records.DatabasechangeloglockRecord
import com.fs.domain.jooq.tables.records.EventCategoriesRecord
import com.fs.domain.jooq.tables.records.EventRecord
import com.fs.domain.jooq.tables.records.InternshipTypeRecord
import com.fs.domain.jooq.tables.records.JobRequestsRecord
import com.fs.domain.jooq.tables.records.OfficeRecord
import com.fs.domain.jooq.tables.records.OrderRecord
import com.fs.domain.jooq.tables.records.PartnerRecord
import com.fs.domain.jooq.tables.records.ProfessionRecord
import com.fs.domain.jooq.tables.records.ReviewRecord

import org.jooq.ForeignKey
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal



// -------------------------------------------------------------------------
// UNIQUE and PRIMARY KEY definitions
// -------------------------------------------------------------------------

val ADDRESS_PKEY: UniqueKey<AddressRecord> = Internal.createUniqueKey(Address.ADDRESS, DSL.name("address_pkey"), arrayOf(Address.ADDRESS.ID), true)
val BASKET_PKEY: UniqueKey<BasketRecord> = Internal.createUniqueKey(Basket.BASKET, DSL.name("basket_pkey"), arrayOf(Basket.BASKET.ID), true)
val CITY_PKEY: UniqueKey<CityRecord> = Internal.createUniqueKey(City.CITY, DSL.name("city_pkey"), arrayOf(City.CITY.ID), true)
val CLIENT_PKEY: UniqueKey<ClientRecord> = Internal.createUniqueKey(Client.CLIENT, DSL.name("client_pkey"), arrayOf(Client.CLIENT.ID), true)
val CLIENTS_LETTERS_PKEY: UniqueKey<ClientsLettersRecord> = Internal.createUniqueKey(ClientsLetters.CLIENTS_LETTERS, DSL.name("clients_letters_pkey"), arrayOf(ClientsLetters.CLIENTS_LETTERS.ID), true)
val CLIENTS_REFRESH_TOKENS_PKEY: UniqueKey<ClientsRefreshTokensRecord> = Internal.createUniqueKey(ClientsRefreshTokens.CLIENTS_REFRESH_TOKENS, DSL.name("clients_refresh_tokens_pkey"), arrayOf(ClientsRefreshTokens.CLIENTS_REFRESH_TOKENS.ID), true)
val CLIENTS_RESET_PASSWORDS_PKEY: UniqueKey<ClientsResetPasswordsRecord> = Internal.createUniqueKey(ClientsResetPasswords.CLIENTS_RESET_PASSWORDS, DSL.name("clients_reset_passwords_pkey"), arrayOf(ClientsResetPasswords.CLIENTS_RESET_PASSWORDS.ID), true)
val COMPANY_PKEY: UniqueKey<CompanyRecord> = Internal.createUniqueKey(Company.COMPANY, DSL.name("company_pkey"), arrayOf(Company.COMPANY.ID), true)
val COMPANY_PARTNER_PKEY: UniqueKey<CompanyPartnerRecord> = Internal.createUniqueKey(CompanyPartner.COMPANY_PARTNER, DSL.name("company_partner_pkey"), arrayOf(CompanyPartner.COMPANY_PARTNER.COMPANY_ID, CompanyPartner.COMPANY_PARTNER.PARTNER_ID), true)
val COMPANY_PROFESSION_PKEY: UniqueKey<CompanyProfessionRecord> = Internal.createUniqueKey(CompanyProfession.COMPANY_PROFESSION, DSL.name("company_profession_pkey"), arrayOf(CompanyProfession.COMPANY_PROFESSION.ID), true)
val CONSTANTS_PKEY: UniqueKey<ConstantsRecord> = Internal.createUniqueKey(Constants.CONSTANTS, DSL.name("constants_pkey"), arrayOf(Constants.CONSTANTS.ID), true)
val COUNTRY_PKEY: UniqueKey<CountryRecord> = Internal.createUniqueKey(Country.COUNTRY, DSL.name("country_pkey"), arrayOf(Country.COUNTRY.CODE), true)
val DATABASECHANGELOGLOCK_PKEY: UniqueKey<DatabasechangeloglockRecord> = Internal.createUniqueKey(Databasechangeloglock.DATABASECHANGELOGLOCK, DSL.name("databasechangeloglock_pkey"), arrayOf(Databasechangeloglock.DATABASECHANGELOGLOCK.ID), true)
val EVENT_PKEY: UniqueKey<EventRecord> = Internal.createUniqueKey(Event.EVENT, DSL.name("event_pkey"), arrayOf(Event.EVENT.ID), true)
val EVENT_CATEGORY_PKEY: UniqueKey<EventCategoriesRecord> = Internal.createUniqueKey(EventCategories.EVENT_CATEGORIES, DSL.name("event_category_pkey"), arrayOf(EventCategories.EVENT_CATEGORIES.ID), true)
val INTERNSHIP_TYPE_PKEY: UniqueKey<InternshipTypeRecord> = Internal.createUniqueKey(InternshipType.INTERNSHIP_TYPE, DSL.name("internship_type_pkey"), arrayOf(InternshipType.INTERNSHIP_TYPE.ID), true)
val JOB_REQUESTS_PKEY: UniqueKey<JobRequestsRecord> = Internal.createUniqueKey(JobRequests.JOB_REQUESTS, DSL.name("job_requests_pkey"), arrayOf(JobRequests.JOB_REQUESTS.ID), true)
val OFFICE_PKEY: UniqueKey<OfficeRecord> = Internal.createUniqueKey(Office.OFFICE, DSL.name("office_pkey"), arrayOf(Office.OFFICE.ID), true)
val ORDER_PKEY: UniqueKey<OrderRecord> = Internal.createUniqueKey(Order.ORDER, DSL.name("order_pkey"), arrayOf(Order.ORDER.ID), true)
val PARTNER_PKEY: UniqueKey<PartnerRecord> = Internal.createUniqueKey(Partner.PARTNER, DSL.name("partner_pkey"), arrayOf(Partner.PARTNER.ID), true)
val PROFESSION_PKEY: UniqueKey<ProfessionRecord> = Internal.createUniqueKey(Profession.PROFESSION, DSL.name("profession_pkey"), arrayOf(Profession.PROFESSION.ID), true)
val REVIEW_PKEY: UniqueKey<ReviewRecord> = Internal.createUniqueKey(Review.REVIEW, DSL.name("review_pkey"), arrayOf(Review.REVIEW.ID), true)

// -------------------------------------------------------------------------
// FOREIGN KEY definitions
// -------------------------------------------------------------------------

val ADDRESS__ADDRESS_CITY_ID_FKEY: ForeignKey<AddressRecord, CityRecord> = Internal.createForeignKey(Address.ADDRESS, DSL.name("address_city_id_fkey"), arrayOf(Address.ADDRESS.CITY_ID), com.fs.domain.jooq.keys.CITY_PKEY, arrayOf(City.CITY.ID), true)
val CITY__CITY_COUNTRY_CODE_FKEY: ForeignKey<CityRecord, CountryRecord> = Internal.createForeignKey(City.CITY, DSL.name("city_country_code_fkey"), arrayOf(City.CITY.COUNTRY_CODE), com.fs.domain.jooq.keys.COUNTRY_PKEY, arrayOf(Country.COUNTRY.CODE), true)
val CLIENT__CLIENT_BASKET_ID_FKEY: ForeignKey<ClientRecord, BasketRecord> = Internal.createForeignKey(Client.CLIENT, DSL.name("client_basket_id_fkey"), arrayOf(Client.CLIENT.BASKET_ID), com.fs.domain.jooq.keys.BASKET_PKEY, arrayOf(Basket.BASKET.ID), true)
val CLIENT__CLIENT_CITY_ID_FKEY: ForeignKey<ClientRecord, CityRecord> = Internal.createForeignKey(Client.CLIENT, DSL.name("client_city_id_fkey"), arrayOf(Client.CLIENT.CITY_ID), com.fs.domain.jooq.keys.CITY_PKEY, arrayOf(City.CITY.ID), true)
val CLIENTS_REFRESH_TOKENS__CLIENTS_REFRESH_TOKENS_CLIENT_ID_FKEY: ForeignKey<ClientsRefreshTokensRecord, ClientRecord> = Internal.createForeignKey(ClientsRefreshTokens.CLIENTS_REFRESH_TOKENS, DSL.name("clients_refresh_tokens_client_id_fkey"), arrayOf(ClientsRefreshTokens.CLIENTS_REFRESH_TOKENS.CLIENT_ID), com.fs.domain.jooq.keys.CLIENT_PKEY, arrayOf(Client.CLIENT.ID), true)
val COMPANY_PARTNER__COMPANY_PARTNER_COMPANY_ID_FKEY: ForeignKey<CompanyPartnerRecord, CompanyRecord> = Internal.createForeignKey(CompanyPartner.COMPANY_PARTNER, DSL.name("company_partner_company_id_fkey"), arrayOf(CompanyPartner.COMPANY_PARTNER.COMPANY_ID), com.fs.domain.jooq.keys.COMPANY_PKEY, arrayOf(Company.COMPANY.ID), true)
val COMPANY_PARTNER__COMPANY_PARTNER_PARTNER_ID_FKEY: ForeignKey<CompanyPartnerRecord, PartnerRecord> = Internal.createForeignKey(CompanyPartner.COMPANY_PARTNER, DSL.name("company_partner_partner_id_fkey"), arrayOf(CompanyPartner.COMPANY_PARTNER.PARTNER_ID), com.fs.domain.jooq.keys.PARTNER_PKEY, arrayOf(Partner.PARTNER.ID), true)
val COMPANY_PROFESSION__COMPANY_PROFESSION_COMPANY_ID_FKEY: ForeignKey<CompanyProfessionRecord, CompanyRecord> = Internal.createForeignKey(CompanyProfession.COMPANY_PROFESSION, DSL.name("company_profession_company_id_fkey"), arrayOf(CompanyProfession.COMPANY_PROFESSION.COMPANY_ID), com.fs.domain.jooq.keys.COMPANY_PKEY, arrayOf(Company.COMPANY.ID), true)
val COMPANY_PROFESSION__COMPANY_PROFESSION_INTERNSHIP_TYPE_ID_FKEY: ForeignKey<CompanyProfessionRecord, InternshipTypeRecord> = Internal.createForeignKey(CompanyProfession.COMPANY_PROFESSION, DSL.name("company_profession_internship_type_id_fkey"), arrayOf(CompanyProfession.COMPANY_PROFESSION.INTERNSHIP_TYPE_ID), com.fs.domain.jooq.keys.INTERNSHIP_TYPE_PKEY, arrayOf(InternshipType.INTERNSHIP_TYPE.ID), true)
val COMPANY_PROFESSION__COMPANY_PROFESSION_PROFESSION_ID_FKEY: ForeignKey<CompanyProfessionRecord, ProfessionRecord> = Internal.createForeignKey(CompanyProfession.COMPANY_PROFESSION, DSL.name("company_profession_profession_id_fkey"), arrayOf(CompanyProfession.COMPANY_PROFESSION.PROFESSION_ID), com.fs.domain.jooq.keys.PROFESSION_PKEY, arrayOf(Profession.PROFESSION.ID), true)
val EVENT__EVENT_EVENT_CATEGORY_ID_FKEY: ForeignKey<EventRecord, EventCategoriesRecord> = Internal.createForeignKey(Event.EVENT, DSL.name("event_event_category_id_fkey"), arrayOf(Event.EVENT.EVENT_CATEGORY_ID), com.fs.domain.jooq.keys.EVENT_CATEGORY_PKEY, arrayOf(EventCategories.EVENT_CATEGORIES.ID), true)
val OFFICE__OFFICE_ADDRESS_ID_FKEY: ForeignKey<OfficeRecord, AddressRecord> = Internal.createForeignKey(Office.OFFICE, DSL.name("office_address_id_fkey"), arrayOf(Office.OFFICE.ADDRESS_ID), com.fs.domain.jooq.keys.ADDRESS_PKEY, arrayOf(Address.ADDRESS.ID), true)
val OFFICE__OFFICE_COMPANY_ID_FKEY: ForeignKey<OfficeRecord, CompanyRecord> = Internal.createForeignKey(Office.OFFICE, DSL.name("office_company_id_fkey"), arrayOf(Office.OFFICE.COMPANY_ID), com.fs.domain.jooq.keys.COMPANY_PKEY, arrayOf(Company.COMPANY.ID), true)
val ORDER__ORDER_BASKET_ID_FKEY: ForeignKey<OrderRecord, BasketRecord> = Internal.createForeignKey(Order.ORDER, DSL.name("order_basket_id_fkey"), arrayOf(Order.ORDER.BASKET_ID), com.fs.domain.jooq.keys.BASKET_PKEY, arrayOf(Basket.BASKET.ID), true)
val ORDER__ORDER_COMPANY_OFFICE_ID_FKEY: ForeignKey<OrderRecord, OfficeRecord> = Internal.createForeignKey(Order.ORDER, DSL.name("order_company_office_id_fkey"), arrayOf(Order.ORDER.COMPANY_OFFICE_ID), com.fs.domain.jooq.keys.OFFICE_PKEY, arrayOf(Office.OFFICE.ID), true)
val ORDER__ORDER_COMPANY_PROFESSION_ID_FKEY: ForeignKey<OrderRecord, CompanyProfessionRecord> = Internal.createForeignKey(Order.ORDER, DSL.name("order_company_profession_id_fkey"), arrayOf(Order.ORDER.COMPANY_PROFESSION_ID), com.fs.domain.jooq.keys.COMPANY_PROFESSION_PKEY, arrayOf(CompanyProfession.COMPANY_PROFESSION.ID), true)
val PARTNER__PARTNER_CLIENT_ID_FKEY: ForeignKey<PartnerRecord, ClientRecord> = Internal.createForeignKey(Partner.PARTNER, DSL.name("partner_client_id_fkey"), arrayOf(Partner.PARTNER.CLIENT_ID), com.fs.domain.jooq.keys.CLIENT_PKEY, arrayOf(Client.CLIENT.ID), true)
val REVIEW__REVIEW_CLIENT_ID_FKEY: ForeignKey<ReviewRecord, ClientRecord> = Internal.createForeignKey(Review.REVIEW, DSL.name("review_client_id_fkey"), arrayOf(Review.REVIEW.CLIENT_ID), com.fs.domain.jooq.keys.CLIENT_PKEY, arrayOf(Client.CLIENT.ID), true)
val REVIEW__REVIEW_ORDER_ID_FKEY: ForeignKey<ReviewRecord, OrderRecord> = Internal.createForeignKey(Review.REVIEW, DSL.name("review_order_id_fkey"), arrayOf(Review.REVIEW.ORDER_ID), com.fs.domain.jooq.keys.ORDER_PKEY, arrayOf(Order.ORDER.ID), true)
