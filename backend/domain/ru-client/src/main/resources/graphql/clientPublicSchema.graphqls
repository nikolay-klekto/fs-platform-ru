type Query {


    getInternshipTypeById(id: ID!): InternshipType
    getAllInternshipTypes: [InternshipType]

    getReviewById(id: ID!): Review
    getAllReviewsByCompany(id: ID!): [Review]

    getCity(id: ID!): City
    getCountryByCity(id: ID): Country
    getAllCities: [City]

<<<<<<< HEAD:backend/domain/ru-client/src/main/resources/graphql/clientSchema.graphqls
    getOrderById(id: ID!): Order
    getOrdersByClientId(clientId: ID): [Order]
    getOrdersByBasketId(basketId: ID): [Order]
    getAllOrders: [Order]

=======
>>>>>>> origin/main:backend/domain/ru-client/src/main/resources/graphql/clientPublicSchema.graphqls
    getCompanyById(id: ID!): Company
    getAllCompanies: [Company]
    getAllAvailableCompanies: [Company]
    getAllCompaniesIndustries: [String]
    getAllCompanyStatusesForTable: [String]
    getAllCompaniesByProfessionId(id: ID!): [Company]
    getAllCompaniesByCountryCode(code: ID!): [Company]
    getAllCompaniesByCityId(id: ID!): [Company]

    getProfessionById(id: ID!): Profession
    getAllProfessionsByCompanyId(id: ID!): [Profession]
    getAllProfessions: [Profession]
<<<<<<< HEAD:backend/domain/ru-client/src/main/resources/graphql/clientSchema.graphqls
=======
    getAllExistingProfessions:[Profession]
    getAllProfessionsByInternshipType(internshipTypeId: ID!): [Profession]
    getAllProfessionsCategories: [String]
>>>>>>> origin/main:backend/domain/ru-client/src/main/resources/graphql/clientPublicSchema.graphqls
    getNMostPopularProfessions(quantity: ID!): [Profession]
    getAllProfessionsCategoriesForTable: [String]

    getPartnerById(id: ID!): Partner
    getAllPartners: [Partner]
    getPartnersByCompanyId(id: ID!): [Partner]



    getCountry(code: ID!): Country
    getCountryByName(name: CountryNameEnum): Country
    getAllCountries: [Country]

    getOffice(id: ID!): Office
    getAllOfficesByCompanyId(id: ID!): [Office]

    getEvent(eventId: ID!): Event
    getAllEvents: [Event]
    getAllActualEvents: [Event]
    getAllActualEventsByCityId(cityId: ID!): [Event]
<<<<<<< HEAD:backend/domain/ru-client/src/main/resources/graphql/clientSchema.graphqls
=======
    getEventsAvailableCities: [City]
>>>>>>> origin/main:backend/domain/ru-client/src/main/resources/graphql/clientPublicSchema.graphqls
    getFirstNActualEvents(eventQuantity: ID!): [Event]
    getEventsByTimeRange(from: String, to: String): [Event]

<<<<<<< HEAD:backend/domain/ru-client/src/main/resources/graphql/clientSchema.graphqls
    getLowestPriceByInternshipTypeId(internshipTypeId: ID): ID
=======
    getAllEventCategoriesNames: [String]
    getAllEventCategories: [EventCategory]

    getLowestPricesByInternshipTypes: [InternshipPricesModel]
>>>>>>> origin/main:backend/domain/ru-client/src/main/resources/graphql/clientPublicSchema.graphqls

    getDaysForPayOrder: Int
    getInfoForContactPage: ConstantsModel
    getInfoForFooter: ConstantsModel

    getFeedbackByCompanyId(companyId: ID!): [ProfessionsCompaniesFeedback]
    getFeedbackByProfessionId(professionId: ID!): [ProfessionsCompaniesFeedback]

    getOrderDatesByProfessionCompanyId(companyProfessionId: ID!): [OrderDates]

    getInternshipTypesAndPricesByCompanyProfessionId(companyId: ID!, professionId: ID!): [InternshipPricesModel]

    getEducationOptions:[ClientEducationModel]
    getEmploymentOptions:[ClientEmploymentModel]
}

type Mutation {
    addInternshipType(internshipType: InternshipTypeInput!): InternshipType
    updateInternshipTypeById(id: ID!, internshipType: InternshipTypeInput!): Boolean
    deleteInternshipTypeById(id: ID!): Boolean



    addCity(city: CityInput!): City
    deleteCity(cityId: ID!): Boolean

<<<<<<< HEAD:backend/domain/ru-client/src/main/resources/graphql/clientSchema.graphqls
    addOrder(order: OrderInput!): Order
    updateOrder(order: OrderInput!): Boolean
    deleteOrder(id: ID!): Boolean
    deleteAllOrdersByBasketId(basketId: ID!): Boolean
=======
    changePassword(clientId: String!, password: String!): Boolean
>>>>>>> origin/main:backend/domain/ru-client/src/main/resources/graphql/clientPublicSchema.graphqls

    addCompany(company: CompanyInput!): Company
    addCompanyByPartner(partnerId: ID!, company: CompanyInput!): Company
    updateCompany(company: CompanyInput!): Boolean
    deleteCompany(id: ID!): Boolean

    addProfession(profession: ProfessionInput!): Profession
    addCompanyProfession(companyProfession: CompanyProfessionInput!, profession: ProfessionInput!): Profession
    addExistingProfessionToCompany(companyProfession: CompanyProfessionInput!): Boolean
    updateProfession(profession: ProfessionInput!): Boolean
    deleteProfession(id: ID!): Boolean

    addPartner(client: ClientInsert): ErrorPartnerModel
    deletePartner(id: ID!): Boolean
    verifyPartner(partnerId: ID!): Boolean

    addAddress(address: AddressInput!): Address
    updateAddress(address: AddressInput!): Boolean
    deleteAddress(id: ID!): Boolean

    addBasket: Basket
    updateBasket(basket: BasketInput!): Boolean


    addCountry(country: CountryInput): Country
    deleteCountry(countryCode: ID!): Boolean

    addOfficeAddress(companyAddress: CompanyAddressInput!): Office
    updateOfficeAddress(companyAddress: CompanyAddressInput!): Boolean
    deleteAllOfficesByCompanyId(id: ID!): Boolean
    deleteOffice(id: ID!): Boolean

    addAllEvents(events: [EventInput]): ErrorBooleanModel
    updateAllEvents(events: [EventInput]): ErrorBooleanModel
    updateExpiredEventsStatus: Boolean
    deleteEvent(eventId: ID!): Boolean
    deleteAllEvents: Boolean
    deleteAllExpiredEvents: Boolean
<<<<<<< HEAD:backend/domain/ru-client/src/main/resources/graphql/clientSchema.graphqls
    createGoogleCalendarEvent(clientEmail: String!, event: EventInput!): Boolean
=======
    createGoogleCalendarEvent(clientEmail: String!, eventId: ID!): Boolean

    addEventCategory(eventCategory: EventCategoryInput!): EventCategory
    updateEventCategory(eventCategory: EventCategoryInput!): Boolean

    resetClientPassword(email: String!): ErrorBooleanModel
    checkResetCode(clientPasswordModel: ClientsResetPasswords!): ErrorStringModel

    addUnAuthorizeOrder(order: UnAuthorizeOrderModelInput!): Order

    insertClientLetter(clientLetter: ClientsLettersInput!): ClientsLetters

    insertJobRequest(jobRequests: JobRequestsInput!): JobRequests

    insertProfessionsCompaniesFeedback(professionsCompaniesFeedback: ProfessionsCompaniesFeedbackInput!): ProfessionsCompaniesFeedback

    insertOrderDate(orderDate: OrderDatesInput!): OrderDates
}

input ProfessionsCompaniesFeedbackInput{
    id: ID
    companyId: ID
    professionId: ID
    question: String
    answer: String
    dateCreated: String
}

input OrderDatesInput{
    id: ID
    companyProfessionId: ID
    dates: String
    freePlaces: Int
}

type OrderDates{
    id: ID
    companyProfessionId: ID
    dates: String
    freePlaces: Int
    dateCreated: String
}

type ProfessionsCompaniesFeedback{
    id: ID
    companyId: ID
    professionId: ID
    question: String
    answer: String
    dateCreated: String
>>>>>>> origin/main:backend/domain/ru-client/src/main/resources/graphql/clientPublicSchema.graphqls
}

input InternshipTypeInput {
    id: ID
    name: String
    description: String
}

input ClientsLettersInput{
    id: ID
    username: String
    phoneNumber: String
    email: String
    clientType: String
    comment: String
}

type ClientsLetters{
    id: ID
    username: String
    phoneNumber: String
    email: String
    clientType: String
    comment: String
    dateCreated: String
}

type ClientEducationModel{
    educationForView: String
    educationForQuery: String
}

type ClientEmploymentModel{
    employmentForView: String
    employmentForQuery: String
}

type ConstantsModel{
     id: ID
     phoneNumber: String
     clientEmail: String
     partnerEmail: String
     candidateEmail: String
     officeCity: String
     officeAddress: String
     instLink: String
     tgLink: String
     linkedinLink: String
     footerOfficialInfo: String
     footerAdditionalInfo: String
}

input JobRequestsInput{
    id: ID
    username: String
    phoneNumber: String
    profession: String
}

type JobRequests{
    id: ID
    username: String
    phoneNumber: String
    profession: String
    dateCreated: String
}

input UnAuthorizeOrderModelInput{
    id: ID
    companyOfficeId: ID
    dateCreated: String
    orderStatus: OrderStatus
    startWorkDate: String
    totalWorkDays: Int
    price: Float
    companyProfessionId: Int
    contractNumber: String
    orderDatesId: ID
}

input ReviewInput {
    id: ID
    orderId: ID
    clientId: ID
    description: String,
    rate: Int
}

input CityInput {
    id: ID,
    countryCode: ID,
    name: String
}

input CountryInput {
    code: ID,
    currency: CurrencyEnum,
    name: CountryNameEnum
}

input OrderInput {
    id: ID
    basketId: ID
    companyOfficeId: ID
    dateCreated: String
    orderStatus: OrderStatus
    startWorkDate: String
    totalWorkDays: Int
    price: Float
    companyProfessionId: Int
    contractNumber: String
    orderDatesId: ID
}

input OrderInsertInput {
    id: ID
    basketId: ID
    companyOfficeId: ID
    dateCreated: String
    orderStatus: OrderStatus
    startWorkDate: String
    totalWorkDays: Int
    price: Float
    companyProfessionId: ID
    contractNumber: String
    orderDatesId: ID
}

input CompanyInput {
    id: ID
    companyIndustry: String
    legalCapacityStatus: String
    name: String
    site: String
    shortDescription: String
    workTime: String
}

input ProfessionInput {
    id: ID
    description: String,
    name: String,
    clientsNumber: Int
    professionIndustry: String
}

input CompanyProfessionInput {
    id: ID
    companyId: Int,
    internshipTypeId: Int,
    pricePerDay: Float
    professionId: Int
}

input PartnerInput {
    id: ID
    clientId: ID
}

input ClientInsert {
    cityId: ID,
    basketId: ID
    #    activateStatus: Boolean,
    birthday: String,
    #    birthday: String,
    #    dateCreated: String,
    #    dateCreated: String,
    educationStatus: EducationEnum,
    email: String,
    employment: EmploymentEnum,
    firstName: String,
    lastName: String,
    password: String,
    phoneNumber: String,
    role: ClientRoleEnum,
    telegramUsername: String,
}

input ClientUpdate {
    id: ID!,
    city: String,
    birthday: String,
    educationStatus: EducationEnum,
    email: String,
    employment: EmploymentEnum,
    firstName: String,
    lastName: String,
    phoneNumber: String,
    telegramUsername: String,
}

input BasketInput {
    id: ID,
    totalPrice: Float
}

input AddressInput {
    id: ID
    cityId: ID
    street: String
    house: String
    officeNumber: String
}

input OfficeInput {
    id: ID
    addressId: ID
    companyId: ID
    phoneNumber: String
}

input CompanyAddressInput {
    addressId: ID
    cityId: ID
    companyId: ID
    officeId: ID
    street: String
    house: String
    officeNumber: String
    phoneNumber: String
    workTime: String
}

input EventInput {
    id: ID
<<<<<<< HEAD:backend/domain/ru-client/src/main/resources/graphql/clientSchema.graphqls
    cityId: ID
    apartment: ID
    building: ID
    date: LocalDateTime
=======
    date: String
>>>>>>> origin/main:backend/domain/ru-client/src/main/resources/graphql/clientPublicSchema.graphqls
    description: String
    house: ID
    mainGoal: String
    name: String
    phoneNumber: String
    publicPlaceName: String
    site: String
    street: String
}

type Review {
    id: ID
    orderId: ID
    clientId: ID
    dateCreated: String
    description: String
    rate: Int
}

type Order {
    id: ID
    basketId: ID
    office: Office
    dateCreated: String
    companyProfession: CompanyProfession
    orderStatus: OrderStatus
    startWorkDate: String
    totalWorkDays: Int
    price: Float
    contractNumber: String
    orderDatesId: ID
}

input ClientsResetPasswords{
    id: ID
    clientEmail: String!
    code: Int!
}

type Company {
    id: ID
    companyIndustry: String
    legalCapacityStatus: LegalCapacityStatus
    name: String
    site: String
    shortDescription: String
    workTime: String
    pricePerWeek: ID
}

input AuthorizationClientModelInsert {
    basketId: ID,
    email: String,
    password: String,
    phoneNumber: String
}

type Profession {
    id: ID
    description: String
    name: String
    clientsNumber: Int
    professionIndustry: String
    pricePerWeek: ID
}

type InternshipType {
    id: ID
    name: String
    description: String
}

type InternshipPricesModel {
    internshipType: InternshipType
    pricePerDay: ID
    companyProfessionId: ID
}

type Client {
    id: ID,
    basketId: ID,
    city: City,
    activateStatus: Boolean,
    #        birthday: Date,
    birthday: String,
    dateCreated: String,
    #    dateCreated: String,
    educationStatus: EducationEnum,
    email: String,
    employment: EmploymentEnum,
    firstName: String,
    lastName: String,
    password: String,
    phoneNumber: String,
    role: ClientRoleEnum,
    telegramUsername: String,
}

type Basket {
    id: ID,
    totalPrice: Float
}

type City {
    id: ID,
    country: Country,
    name: String
}

type Country {
    code: ID,
    currency: CurrencyEnum,
    name: CountryNameEnum
}

type Partner {
    id: ID,
    client: Client
}

type Address {
    id: ID
    city: City
    street: String
    house: String
    officeNumber: String
}

type Office {
    id: ID
    address: Address
    company: Company
    phoneNumber: String
}

type Event {
    id: ID
<<<<<<< HEAD:backend/domain/ru-client/src/main/resources/graphql/clientSchema.graphqls
    address: Address
    date: LocalDateTime
=======
    date: String
>>>>>>> origin/main:backend/domain/ru-client/src/main/resources/graphql/clientPublicSchema.graphqls
    description: String
    isExpired: Boolean
    mainGoal: String
    name: String
    phoneNumber: String
    publicPlaceName: String
    site: String
<<<<<<< HEAD:backend/domain/ru-client/src/main/resources/graphql/clientSchema.graphqls
=======
    city: City
    time: String
    organizer: String
    eventCategory: EventCategory
    price: Float
}

type EventCategory{
    id: ID
    category: String
    description: String
}

input EventCategoryInput{
    id: ID
    category: String
>>>>>>> origin/main:backend/domain/ru-client/src/main/resources/graphql/clientPublicSchema.graphqls
}

type ErrorBooleanModel {
    data: Boolean
    errorMessage: String
}

type ErrorStringModel{
    data: String
    errorMessage: String
}

type ErrorClientModel {
    data: Client
    errorMessage: String
}

type ErrorLongModel {
    data: ID
    errorMessage: String
}

type ErrorPartnerModel {
    data: Partner
    errorMessage: String
}

type ErrorReviewModel {
    data: Review
    errorMessage: String
}

type CompanyProfession{
    id: ID
    company: Company
    internshipType: InternshipType
    pricePerDay: ID
    profession: Profession

}

enum EducationEnum {
    LOWER_SECONDARY
    SECONDARY
    INCOMPLETE_HIGHER
    HIGHER
    MAGISTRACY
    OTHER
}

enum EmploymentEnum {
    SELF_EMPLOYED
    SCHOOL_BOY
    STUDENT
    PENSIONER
    UNEMPLOYED
    EMPLOYER
    EMPLOYEE
    OTHER
}

enum ClientRoleEnum {
    CLIENT
    PARTNER
    ADMIN
    UNREGISTERED_CLIENT
}

enum CurrencyEnum {
    BYN
    USD
    EUR
    RUB
    PLN
    UNKNOWN
}

enum CountryNameEnum {
    BELARUS
    RUSSIA
    POLAND
    UNKNOWN
}

enum CompanyIndustryEnum {
    IT
    BOOKKEEPING
    FEC
    SERVICE
    ARMY
    SECURITY
    RAWMATERIALSMINING
    ART
    MEDICINE
    SCIENCE
    GOV_SERVICE
    SALES
    PRODUCTION
    BUILDING
    TRANSPORT
    OTHER
}

enum LegalCapacityStatus {
    CAPABLE
    TEMPORARILY_UNAVAILABLE
    CLOSED
}

enum OrderStatus {
    EXPIRED
    ACTUAL
    PRE_ORDERED
    BASKET
    TERMINATE_CONTRACT
    DELETED_FROM_BASKET
    ALARM_TERMINATE_CURRENT_ORDER
    NEED_TO_APPROVE_FROM_BASKET
    PRE_ORDERED_DECLINED
}
