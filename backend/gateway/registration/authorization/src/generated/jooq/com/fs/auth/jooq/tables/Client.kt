/*
 * This file is generated by jOOQ.
 */
package com.fs.auth.jooq.tables


import com.fs.auth.jooq.Public
import com.fs.auth.jooq.keys.CLIENT_PKEY
import com.fs.auth.jooq.keys.CLIENT__CLIENT_BASKET_ID_FKEY
import com.fs.auth.jooq.tables.records.ClientRecord
import com.fs.client.ru.enums.ClientRoleModel
import com.fs.client.ru.enums.EducationModel
import com.fs.client.ru.enums.EmploymentModel

import java.time.LocalDate
import java.time.LocalDateTime
import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row17
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.EnumConverter
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Client(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ClientRecord>?,
    aliased: Table<ClientRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ClientRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.client</code>
         */
        val CLIENT: Client = Client()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ClientRecord> = ClientRecord::class.java

    /**
     * The column <code>public.client.basket_id</code>.
     */
    val BASKET_ID: TableField<ClientRecord, Long?> = createField(DSL.name("basket_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.client.city_id</code>.
     */
    val CITY_ID: TableField<ClientRecord, Long?> = createField(DSL.name("city_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.client.activate_status</code>.
     */
    val ACTIVATE_STATUS: TableField<ClientRecord, Boolean?> = createField(DSL.name("activate_status"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>public.client.birthday</code>.
     */
    val BIRTHDAY: TableField<ClientRecord, LocalDate?> = createField(DSL.name("birthday"), SQLDataType.LOCALDATE, this, "")

    /**
     * The column <code>public.client.date_created</code>.
     */
    val DATE_CREATED: TableField<ClientRecord, LocalDateTime?> = createField(DSL.name("date_created"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.client.education_status</code>.
     */
    val EDUCATION_STATUS: TableField<ClientRecord, EducationModel?> = createField(DSL.name("education_status"), SQLDataType.VARCHAR, this, "", EnumConverter<String, EducationModel>(String::class.java, EducationModel::class.java))

    /**
     * The column <code>public.client.email</code>.
     */
    val EMAIL: TableField<ClientRecord, String?> = createField(DSL.name("email"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.client.employment</code>.
     */
    val EMPLOYMENT: TableField<ClientRecord, EmploymentModel?> = createField(DSL.name("employment"), SQLDataType.VARCHAR, this, "", EnumConverter<String, EmploymentModel>(String::class.java, EmploymentModel::class.java))

    /**
     * The column <code>public.client.first_name</code>.
     */
    val FIRST_NAME: TableField<ClientRecord, String?> = createField(DSL.name("first_name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.client.last_name</code>.
     */
    val LAST_NAME: TableField<ClientRecord, String?> = createField(DSL.name("last_name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.client.password</code>.
     */
    val PASSWORD: TableField<ClientRecord, String?> = createField(DSL.name("password"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.client.phone_number</code>.
     */
    val PHONE_NUMBER: TableField<ClientRecord, String?> = createField(DSL.name("phone_number"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.client.role</code>.
     */
    val ROLE: TableField<ClientRecord, ClientRoleModel?> = createField(DSL.name("role"), SQLDataType.VARCHAR, this, "", EnumConverter<String, ClientRoleModel>(String::class.java, ClientRoleModel::class.java))

    /**
     * The column <code>public.client.telegram_username</code>.
     */
    val TELEGRAM_USERNAME: TableField<ClientRecord, String?> = createField(DSL.name("telegram_username"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.client.salt</code>.
     */
    val SALT: TableField<ClientRecord, String?> = createField(DSL.name("salt"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.client.id</code>.
     */
    val ID: TableField<ClientRecord, String?> = createField(DSL.name("id"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>public.client.username</code>.
     */
    val USERNAME: TableField<ClientRecord, String?> = createField(DSL.name("username"), SQLDataType.VARCHAR, this, "")

    private constructor(alias: Name, aliased: Table<ClientRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ClientRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.client</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.client</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.client</code> table reference
     */
    constructor(): this(DSL.name("client"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ClientRecord>): this(Internal.createPathAlias(child, key), child, key, CLIENT, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<ClientRecord> = CLIENT_PKEY
    override fun getReferences(): List<ForeignKey<ClientRecord, *>> = listOf(CLIENT__CLIENT_BASKET_ID_FKEY)

    private lateinit var _basket: Basket

    /**
     * Get the implicit join path to the <code>public.basket</code> table.
     */
    fun basket(): Basket {
        if (!this::_basket.isInitialized)
            _basket = Basket(this, CLIENT__CLIENT_BASKET_ID_FKEY)

        return _basket;
    }

    val basket: Basket
        get(): Basket = basket()
    override fun `as`(alias: String): Client = Client(DSL.name(alias), this)
    override fun `as`(alias: Name): Client = Client(alias, this)
    override fun `as`(alias: Table<*>): Client = Client(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Client = Client(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Client = Client(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Client = Client(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row17<Long?, Long?, Boolean?, LocalDate?, LocalDateTime?, EducationModel?, String?, EmploymentModel?, String?, String?, String?, String?, ClientRoleModel?, String?, String?, String?, String?> = super.fieldsRow() as Row17<Long?, Long?, Boolean?, LocalDate?, LocalDateTime?, EducationModel?, String?, EmploymentModel?, String?, String?, String?, String?, ClientRoleModel?, String?, String?, String?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, Long?, Boolean?, LocalDate?, LocalDateTime?, EducationModel?, String?, EmploymentModel?, String?, String?, String?, String?, ClientRoleModel?, String?, String?, String?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, Long?, Boolean?, LocalDate?, LocalDateTime?, EducationModel?, String?, EmploymentModel?, String?, String?, String?, String?, ClientRoleModel?, String?, String?, String?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
