/*
 * This file is generated by jOOQ.
 */
package com.fs.auth.jooq.tables.records


import com.fs.auth.jooq.tables.ClientsRefreshTokens

import java.time.LocalDate

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ClientsRefreshTokensRecord() : UpdatableRecordImpl<ClientsRefreshTokensRecord>(ClientsRefreshTokens.CLIENTS_REFRESH_TOKENS), Record4<Long?, String?, String?, LocalDate?> {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var clientId: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var token: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var expiryDay: LocalDate?
        set(value): Unit = set(3, value)
        get(): LocalDate? = get(3) as LocalDate?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<Long?, String?, String?, LocalDate?> = super.fieldsRow() as Row4<Long?, String?, String?, LocalDate?>
    override fun valuesRow(): Row4<Long?, String?, String?, LocalDate?> = super.valuesRow() as Row4<Long?, String?, String?, LocalDate?>
    override fun field1(): Field<Long?> = ClientsRefreshTokens.CLIENTS_REFRESH_TOKENS.ID
    override fun field2(): Field<String?> = ClientsRefreshTokens.CLIENTS_REFRESH_TOKENS.CLIENT_ID
    override fun field3(): Field<String?> = ClientsRefreshTokens.CLIENTS_REFRESH_TOKENS.TOKEN
    override fun field4(): Field<LocalDate?> = ClientsRefreshTokens.CLIENTS_REFRESH_TOKENS.EXPIRY_DAY
    override fun component1(): Long? = id
    override fun component2(): String? = clientId
    override fun component3(): String? = token
    override fun component4(): LocalDate? = expiryDay
    override fun value1(): Long? = id
    override fun value2(): String? = clientId
    override fun value3(): String? = token
    override fun value4(): LocalDate? = expiryDay

    override fun value1(value: Long?): ClientsRefreshTokensRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): ClientsRefreshTokensRecord {
        this.clientId = value
        return this
    }

    override fun value3(value: String?): ClientsRefreshTokensRecord {
        this.token = value
        return this
    }

    override fun value4(value: LocalDate?): ClientsRefreshTokensRecord {
        this.expiryDay = value
        return this
    }

    override fun values(value1: Long?, value2: String?, value3: String?, value4: LocalDate?): ClientsRefreshTokensRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised ClientsRefreshTokensRecord
     */
    constructor(id: Long? = null, clientId: String? = null, token: String? = null, expiryDay: LocalDate? = null): this() {
        this.id = id
        this.clientId = clientId
        this.token = token
        this.expiryDay = expiryDay
    }

    /**
     * Create a detached, initialised ClientsRefreshTokensRecord
     */
    constructor(value: com.fs.auth.jooq.tables.pojos.ClientsRefreshTokens?): this() {
        if (value != null) {
            this.id = value.id
            this.clientId = value.clientId
            this.token = value.token
            this.expiryDay = value.expiryDay
        }
    }
}
