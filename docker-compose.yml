version: '3.9'
services:
  app:
    image: ru-client:latest
    build:
      context: .
      dockerfile: Dockerfile-Client
    ports:
      - "8183:8183"
    #    container_name: app
    depends_on:
      - service-db
    #       condition: service_healthy
    environment:
      - SERVER_PORT= 8183
      - SPRING_DATASOURCE_URL=jdbc:postgresql://service-db/fun_scrut
    networks:
      - prometheus-grafana-network
    volumes:
      - /home/Nikolay/funScrut/photos/events:/app/uploads/events
    restart: always
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: '1.0'
        reservations:
          memory: 512m

#  app2:
#    image: ru-client:latest
#    build:
#      context: .
#      dockerfile: Dockerfile-Client
#    ports:
#      - "127.0.0.1:8184:8183"
#    #    container_name: app
#    depends_on:
#      - service-db
#    #       condition: service_healthy
#    environment:
#      - SERVER_PORT= 8183
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://service-db/fun_scrut
#    networks:
#      - prometheus-grafana-network
#    volumes:
#      - /home/Nikolay/funScrut/photos/events:/app/uploads/events
#
#  app3:
#    image: ru-client:latest
#    build:
#      context: .
#      dockerfile: Dockerfile-Client
#    ports:
#      - "127.0.0.1:8185:8183"
#    #    container_name: app
#    depends_on:
#      - service-db
##       condition: service_healthy
#    environment:
#      - SERVER_PORT= 8183
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://service-db/fun_scrut
#    networks:
#      - prometheus-grafana-network
#    volumes:
#      - /home/Nikolay/funScrut/photos/events:/app/uploads/events

  appAuth:
    image: ru-auth:latest
    build:
      context: .
      dockerfile: Dockerfile-Auth
    ports:
      - "8282:8282"
    depends_on:
      - service-db
    environment:
      - SERVER_PORT= 8282
      - SPRING_DATASOURCE_URL=jdbc:postgresql://service-db/fun_scrut
    networks:
      - prometheus-grafana-network
    restart: always

  appCallRequest:
    image: ru-call-requests:latest
    build:
      context: .
      dockerfile: Dockerfile-Call-Request
    ports:
      - "8383:8383"
    depends_on:
      - service-db
    environment:
      - SERVER_PORT= 8383
      - SPRING_DATASOURCE_URL=jdbc:postgresql://service-db/fun_scrut
    networks:
      - prometheus-grafana-network
    restart: always

  appPhotoTransger:
    image: ru-photo-transfer:latest
    build:
      context: .
      dockerfile: Dockerfile-PhotoTransfer
    ports:
      - "8585:8585"
    depends_on:
      - service-db
    environment:
      - SERVER_PORT= 8585
    volumes:
      - /home/Nikolay/funScrut/photos/events:/app/uploads/events
    networks:
      - prometheus-grafana-network
    restart: always

#  gateway:
#    image: ru-gateway:latest
#    build:
#      context: .
#      dockerfile: Dockerfile-Gateway
#    ports:
#      - "8081:8081"
#    #    container_name: app
#    depends_on:
#      - service-db
#    #       condition: service_healthy
#    environment:
#      - SERVER_PORT= 8081
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://service-db/fun_scrut
#    networks:
#      - prometheus-grafana-network

  service-db:
    image: postgres:14.7-alpine
    environment:
      POSTGRES_USER: username
      POSTGRES_PASSWORD: password
      PGDATA: "/var/lib/postgresql/data/pgdata"
    #    healthcheck:
    #      test: [ "CMD-SHELL", "pg_isready", "-d", "fun_scrut" ]
    #      interval: 10s
    #      timeout: 3s
    #      retries: 3
    ports:
      - "15432:5432"
    volumes:
      #      - ./infrastructure/db/create_db.sql:/docker-entrypoint-initdb.d/create_db.sql
      - ./infrastructure/db:/docker-entrypoint-initdb.d
      - db-data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - prometheus-grafana-network

  pgadmin:
    container_name: pgadmin4_container
    image: dpage/pgadmin4:7
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - "127.0.0.1:5050:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - prometheus-grafana-network

#  prometheus:
#    image: prom/prometheus:v2.45.5
#    container_name: prometheus-container
#    ports:
#      - "9090:9090"
#    volumes:
#      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
#    networks:
#      - prometheus-grafana-network
#
#  grafana:
#    image: grafana/grafana:10.4.2
#    container_name: grafana-container
#    #    volumes:
#    #      - ./config/grafana/provisioning:/etc/grafana/provisioning
#    ports:
#      - "3000:3000"
#    environment:
#      - GF_SECURITY_ADMIN_USER=admin
#      - GF_SECURITY_ADMIN_PASSWORD=admin
#    depends_on:
#      - prometheus
#    networks:
#      - prometheus-grafana-network

#  react-app:
#    build:
#      context: .
#      dockerfile: Dockerfile-React
#    ports:
#      - "80:80" # Указываем  внешний порт 80
#    networks:
#      - prometheus-grafana-network

networks:
  prometheus-grafana-network:

volumes:
  db-data:
  pgadmin-data:
